//
//  <%= file_name %>
//
//  Auto generated by Aries on <%= timestamp %>.
//  Do not modify this file directory
//

import Alamofire
import SwiftTask
import URITemplate

typealias <%= class_name %>Response = Task<Int,AnyObject,NSError>

protocol <%= class_name %>Delegate {
    func customReqeust(request: NSMutableURLRequest) -> NSMutableURLRequest
    func onDefaultSuccess(response: AnyObject) -> AnyObject
    func onDefaultFailure(err: NSError) -> NSError
}

class <%= class_name %> {

    private struct BaseUrlStringStruct{ static var url = "<%= base_url %>" }
    class var BaseUrlString: String {
        get{ return BaseUrlStringStruct.url }
        set{ BaseUrlStringStruct.url = newValue }
    }

    // workaround tips
    // After updated swift 1.2, use ( static var someVariable: Int = 0 ) instead
    private struct delegateStruct{ static var detegator: <%= class_name %>Delegate? }
    class var delegate: <%= class_name %>Delegate? {
        get{ return delegateStruct.detegator }
        set{ delegateStruct.detegator = newValue }
    }

    private class func defaultURLRequest(let path: String, let method: Alamofire.Method) -> NSMutableURLRequest {
        let URL = NSURL(string: <%= class_name %>.BaseUrlString)!
        let mutableURLRequest = NSMutableURLRequest(URL: URL.URLByAppendingPathComponent(path))

        mutableURLRequest.HTTPMethod = method.rawValue
        mutableURLRequest.setValue("application/json", forHTTPHeaderField: "Content-Type")
        mutableURLRequest.setValue("application/json", forHTTPHeaderField: "Accept")

        if let delegate = self.delegate?{
            return delegate.customReqeust(mutableURLRequest)
        }

        return mutableURLRequest
    }

    private class func generateURI(template: String, params: [String: AnyObject]?) -> String {
        if let params = params {
            return URITemplate(template: template).expand(params)
        }
        return template
    }

    class Base {

        private class func request(URLRequest: URLRequestConvertible) -> <%= class_name %>Response {
            return <%= class_name %>Response {(progress, fulfill, reject, configure) in
                let alam = Alamofire.request(URLRequest)
                                    .validate()
                                    .responseJSON({ (req, res, data, err) -> Void in

                    if let err = err {
                        reject(self.buildErr(res, data: data, err: err))
                        return
                    }
                    fulfill(data!)
                })
                debugPrintln(alam)
                configure.pause  = { [weak alam] in if let alam = alam { alam.suspend() } }
                configure.resume = { [weak alam] in if let alam = alam { alam.resume() }  }
                configure.cancel = { [weak alam] in if let alam = alam { alam.cancel() }  }
            }.then({ (data, errorInfo) -> <%= class_name %>Response in
                return <%= class_name %>Response { (progress, fulfill, reject, configure) in
                    if(errorInfo == nil){
                        if let delegate = <%= class_name %>.delegate {
                            let newData: AnyObject = delegate.onDefaultSuccess(data!)
                            fulfill(newData)
                            return
                        }
                        fulfill(data!)
                        return
                    }else{
                        let (err, isCancelled) = errorInfo!
                        if let err = err {
                            if let delegate = <%= class_name %>.delegate{
                                let newErr = delegate.onDefaultFailure(err)
                                reject(newErr)
                                return
                            }
                            reject(err)
                            return
                        }
                    }
                }

            })
        }

        private class func buildErr(res: NSHTTPURLResponse?, data: AnyObject?, err: NSError?) -> NSError {
            var userInfo = [String: AnyObject]()
            if let res = res {
                userInfo["statusCode"] = res.statusCode
            }else{
                userInfo["statusCode"] = 502
            }
            if let data: AnyObject = data {
                userInfo["response"] = data
            }
            if let err = err {
                userInfo["originalError"] = err
            }
            var error = NSError(domain: "com.aries.error", code: -1, userInfo: userInfo)
            return error
        }

    }

    <% resources.each do |resource| %>

      class <%= resource.name %>: Base {

        <% resource.links.each do |li| %>

          class func <%= li.method_name %>(<%= li.params_for_method %>) -> <%= class_name %>Response {
            <% if li.has_params? %>
              var params = [String: AnyObject]()
            <% else %>
              var params: [String: AnyObject]? = nil
            <% end %>

            <% li.required_params.each do |param| %>
              <% if param.has_children? %>
                var items_<%= param.name %> = [String: AnyObject]()
                <% param.params.each do |ch| %>
                  if let item_<%= ch.name %> = <%= param.name %>["<%= ch.name %>"] as? <%= ch.param_class %> {
                    items_<%= param.name %>["<%= ch.name %>"] = item_<%= ch.name %>
                  }
                <% end %>
                params["<%= param.name %>"] = items_<%= param.name %>
              <% else %>
                params["<%= param.name %>"] = <%= param.name %>
              <% end %>
            <% end %>

            <% li.optional_params.each do |param| %>
              if let <%= param.name %> = <%= param.name %> {
                <% if param.has_children? %>
                  var items_<%= param.name %> = [String: AnyObject]()
                  <% param.params.each do |ch| %>
                    if let item_<%= ch.name %> = <%= param.name %>["<%= ch.name %>"] as? <%= ch.param_class %> {
                      items_<%= param.name %>["<%= ch.name %>"] = item_<%= ch.name %>
                    }
                  <% end %>
                  params["<%= param.name %>"] = items_<%= param.name %>
                <% else %>
                params["<%= param.name %>"] = <%= param.name %>
                <% end %>
              }
            <% end %>

            return request(Router.<%= li.method_name %>(params))
          }

        <% end %>

        private enum Router: URLRequestConvertible {

            <% resource.links.each do |li| %>
              case <%= li.method_name %>([String: AnyObject]?)
            <% end %>
            <% if resource.links.size > 0 %>
            var method: Alamofire.Method {
                switch self {
                <% resource.links.each do |li| %>
                  case .<%= li.method_name %>:
                    return .<%= li.http_method %>
                <% end %>
                }
            }
            <% end %>

            <% if resource.links.size > 0 %>
            var path: String {
                switch self {
                <% resource.links.each do |li| %>
                case .<%= li.method_name %>(let params):
                  return <%= class_name %>.generateURI("<%= li.pretty_href %>", params: params)
                <% end %>
                }
            }
            <% end %>

            // MARK: URLRequestConvertible

            <% if resource.links.size > 0 %>
            var URLRequest: NSURLRequest {
              switch self{
              <% resource.links.each do |li| %>
              case .<%= li.method_name %>(let parameters):
                return Alamofire.ParameterEncoding.<%= li.encode %>.encode(<%= class_name %>.defaultURLRequest(path, method: method), parameters: parameters).0
              <% end %>
              }
            }
            <% end %>

        }


      }

    <% end %>

}
